// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReinforcementLearning.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ReinforcementLearning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ReinforcementLearning {

namespace {

const ::google::protobuf::Descriptor* ReinforcementLearningParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReinforcementLearningParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* QLearningSolverParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QLearningSolverParameter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ReinforcementLearning_2eproto() {
  protobuf_AddDesc_ReinforcementLearning_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ReinforcementLearning.proto");
  GOOGLE_CHECK(file != NULL);
  ReinforcementLearningParameter_descriptor_ = file->message_type(0);
  static const int ReinforcementLearningParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReinforcementLearningParameter, qlearningsolverparameter_),
  };
  ReinforcementLearningParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReinforcementLearningParameter_descriptor_,
      ReinforcementLearningParameter::default_instance_,
      ReinforcementLearningParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReinforcementLearningParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReinforcementLearningParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReinforcementLearningParameter));
  QLearningSolverParameter_descriptor_ = file->message_type(1);
  static const int QLearningSolverParameter_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLearningSolverParameter, numtrainingepisodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLearningSolverParameter, learningrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLearningSolverParameter, epsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLearningSolverParameter, episodelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLearningSolverParameter, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLearningSolverParameter, numepisodesbeforetraining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLearningSolverParameter, qtableoutputinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLearningSolverParameter, controlinterval_),
  };
  QLearningSolverParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QLearningSolverParameter_descriptor_,
      QLearningSolverParameter::default_instance_,
      QLearningSolverParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLearningSolverParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QLearningSolverParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QLearningSolverParameter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ReinforcementLearning_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReinforcementLearningParameter_descriptor_, &ReinforcementLearningParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QLearningSolverParameter_descriptor_, &QLearningSolverParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ReinforcementLearning_2eproto() {
  delete ReinforcementLearningParameter::default_instance_;
  delete ReinforcementLearningParameter_reflection_;
  delete QLearningSolverParameter::default_instance_;
  delete QLearningSolverParameter_reflection_;
}

void protobuf_AddDesc_ReinforcementLearning_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033ReinforcementLearning.proto\022\025Reinforce"
    "mentLearning\"s\n\036ReinforcementLearningPar"
    "ameter\022Q\n\030qLearningSolverParameter\030d \001(\013"
    "2/.ReinforcementLearning.QLearningSolver"
    "Parameter\"\365\001\n\030QLearningSolverParameter\022\033"
    "\n\023numTrainingEpisodes\030\001 \001(\005\022\031\n\014learningR"
    "ate\030\002 \001(\001:\0030.1\022\025\n\007epsilon\030\003 \001(\001:\0040.95\022\025\n"
    "\rEpisodeLength\030\004 \001(\005\022\026\n\010discount\030\005 \001(\001:\004"
    "0.95\022!\n\031numEpisodesBeforeTraining\030\006 \001(\005\022"
    "\034\n\024QTableOutputInterval\030\007 \001(\005\022\032\n\017control"
    "Interval\030\010 \001(\005:\0011", 417);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ReinforcementLearning.proto", &protobuf_RegisterTypes);
  ReinforcementLearningParameter::default_instance_ = new ReinforcementLearningParameter();
  QLearningSolverParameter::default_instance_ = new QLearningSolverParameter();
  ReinforcementLearningParameter::default_instance_->InitAsDefaultInstance();
  QLearningSolverParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ReinforcementLearning_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ReinforcementLearning_2eproto {
  StaticDescriptorInitializer_ReinforcementLearning_2eproto() {
    protobuf_AddDesc_ReinforcementLearning_2eproto();
  }
} static_descriptor_initializer_ReinforcementLearning_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReinforcementLearningParameter::kQLearningSolverParameterFieldNumber;
#endif  // !_MSC_VER

ReinforcementLearningParameter::ReinforcementLearningParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReinforcementLearning.ReinforcementLearningParameter)
}

void ReinforcementLearningParameter::InitAsDefaultInstance() {
  qlearningsolverparameter_ = const_cast< ::ReinforcementLearning::QLearningSolverParameter*>(&::ReinforcementLearning::QLearningSolverParameter::default_instance());
}

ReinforcementLearningParameter::ReinforcementLearningParameter(const ReinforcementLearningParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReinforcementLearning.ReinforcementLearningParameter)
}

void ReinforcementLearningParameter::SharedCtor() {
  _cached_size_ = 0;
  qlearningsolverparameter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReinforcementLearningParameter::~ReinforcementLearningParameter() {
  // @@protoc_insertion_point(destructor:ReinforcementLearning.ReinforcementLearningParameter)
  SharedDtor();
}

void ReinforcementLearningParameter::SharedDtor() {
  if (this != default_instance_) {
    delete qlearningsolverparameter_;
  }
}

void ReinforcementLearningParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReinforcementLearningParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReinforcementLearningParameter_descriptor_;
}

const ReinforcementLearningParameter& ReinforcementLearningParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReinforcementLearning_2eproto();
  return *default_instance_;
}

ReinforcementLearningParameter* ReinforcementLearningParameter::default_instance_ = NULL;

ReinforcementLearningParameter* ReinforcementLearningParameter::New() const {
  return new ReinforcementLearningParameter;
}

void ReinforcementLearningParameter::Clear() {
  if (has_qlearningsolverparameter()) {
    if (qlearningsolverparameter_ != NULL) qlearningsolverparameter_->::ReinforcementLearning::QLearningSolverParameter::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReinforcementLearningParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReinforcementLearning.ReinforcementLearningParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ReinforcementLearning.QLearningSolverParameter qLearningSolverParameter = 100;
      case 100: {
        if (tag == 802) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qlearningsolverparameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReinforcementLearning.ReinforcementLearningParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReinforcementLearning.ReinforcementLearningParameter)
  return false;
#undef DO_
}

void ReinforcementLearningParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReinforcementLearning.ReinforcementLearningParameter)
  // optional .ReinforcementLearning.QLearningSolverParameter qLearningSolverParameter = 100;
  if (has_qlearningsolverparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->qlearningsolverparameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReinforcementLearning.ReinforcementLearningParameter)
}

::google::protobuf::uint8* ReinforcementLearningParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReinforcementLearning.ReinforcementLearningParameter)
  // optional .ReinforcementLearning.QLearningSolverParameter qLearningSolverParameter = 100;
  if (has_qlearningsolverparameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->qlearningsolverparameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReinforcementLearning.ReinforcementLearningParameter)
  return target;
}

int ReinforcementLearningParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ReinforcementLearning.QLearningSolverParameter qLearningSolverParameter = 100;
    if (has_qlearningsolverparameter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qlearningsolverparameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReinforcementLearningParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReinforcementLearningParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReinforcementLearningParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReinforcementLearningParameter::MergeFrom(const ReinforcementLearningParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qlearningsolverparameter()) {
      mutable_qlearningsolverparameter()->::ReinforcementLearning::QLearningSolverParameter::MergeFrom(from.qlearningsolverparameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReinforcementLearningParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReinforcementLearningParameter::CopyFrom(const ReinforcementLearningParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReinforcementLearningParameter::IsInitialized() const {

  return true;
}

void ReinforcementLearningParameter::Swap(ReinforcementLearningParameter* other) {
  if (other != this) {
    std::swap(qlearningsolverparameter_, other->qlearningsolverparameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReinforcementLearningParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReinforcementLearningParameter_descriptor_;
  metadata.reflection = ReinforcementLearningParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QLearningSolverParameter::kNumTrainingEpisodesFieldNumber;
const int QLearningSolverParameter::kLearningRateFieldNumber;
const int QLearningSolverParameter::kEpsilonFieldNumber;
const int QLearningSolverParameter::kEpisodeLengthFieldNumber;
const int QLearningSolverParameter::kDiscountFieldNumber;
const int QLearningSolverParameter::kNumEpisodesBeforeTrainingFieldNumber;
const int QLearningSolverParameter::kQTableOutputIntervalFieldNumber;
const int QLearningSolverParameter::kControlIntervalFieldNumber;
#endif  // !_MSC_VER

QLearningSolverParameter::QLearningSolverParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReinforcementLearning.QLearningSolverParameter)
}

void QLearningSolverParameter::InitAsDefaultInstance() {
}

QLearningSolverParameter::QLearningSolverParameter(const QLearningSolverParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReinforcementLearning.QLearningSolverParameter)
}

void QLearningSolverParameter::SharedCtor() {
  _cached_size_ = 0;
  numtrainingepisodes_ = 0;
  learningrate_ = 0.1;
  epsilon_ = 0.95;
  episodelength_ = 0;
  discount_ = 0.95;
  numepisodesbeforetraining_ = 0;
  qtableoutputinterval_ = 0;
  controlinterval_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QLearningSolverParameter::~QLearningSolverParameter() {
  // @@protoc_insertion_point(destructor:ReinforcementLearning.QLearningSolverParameter)
  SharedDtor();
}

void QLearningSolverParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QLearningSolverParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QLearningSolverParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QLearningSolverParameter_descriptor_;
}

const QLearningSolverParameter& QLearningSolverParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReinforcementLearning_2eproto();
  return *default_instance_;
}

QLearningSolverParameter* QLearningSolverParameter::default_instance_ = NULL;

QLearningSolverParameter* QLearningSolverParameter::New() const {
  return new QLearningSolverParameter;
}

void QLearningSolverParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QLearningSolverParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(numtrainingepisodes_, episodelength_);
    ZR_(numepisodesbeforetraining_, qtableoutputinterval_);
    learningrate_ = 0.1;
    epsilon_ = 0.95;
    discount_ = 0.95;
    controlinterval_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QLearningSolverParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReinforcementLearning.QLearningSolverParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 numTrainingEpisodes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numtrainingepisodes_)));
          set_has_numtrainingepisodes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_learningRate;
        break;
      }

      // optional double learningRate = 2 [default = 0.1];
      case 2: {
        if (tag == 17) {
         parse_learningRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &learningrate_)));
          set_has_learningrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_epsilon;
        break;
      }

      // optional double epsilon = 3 [default = 0.95];
      case 3: {
        if (tag == 25) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EpisodeLength;
        break;
      }

      // optional int32 EpisodeLength = 4;
      case 4: {
        if (tag == 32) {
         parse_EpisodeLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episodelength_)));
          set_has_episodelength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_discount;
        break;
      }

      // optional double discount = 5 [default = 0.95];
      case 5: {
        if (tag == 41) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_numEpisodesBeforeTraining;
        break;
      }

      // optional int32 numEpisodesBeforeTraining = 6;
      case 6: {
        if (tag == 48) {
         parse_numEpisodesBeforeTraining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numepisodesbeforetraining_)));
          set_has_numepisodesbeforetraining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_QTableOutputInterval;
        break;
      }

      // optional int32 QTableOutputInterval = 7;
      case 7: {
        if (tag == 56) {
         parse_QTableOutputInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qtableoutputinterval_)));
          set_has_qtableoutputinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_controlInterval;
        break;
      }

      // optional int32 controlInterval = 8 [default = 1];
      case 8: {
        if (tag == 64) {
         parse_controlInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controlinterval_)));
          set_has_controlinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReinforcementLearning.QLearningSolverParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReinforcementLearning.QLearningSolverParameter)
  return false;
#undef DO_
}

void QLearningSolverParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReinforcementLearning.QLearningSolverParameter)
  // optional int32 numTrainingEpisodes = 1;
  if (has_numtrainingepisodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numtrainingepisodes(), output);
  }

  // optional double learningRate = 2 [default = 0.1];
  if (has_learningrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->learningrate(), output);
  }

  // optional double epsilon = 3 [default = 0.95];
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->epsilon(), output);
  }

  // optional int32 EpisodeLength = 4;
  if (has_episodelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->episodelength(), output);
  }

  // optional double discount = 5 [default = 0.95];
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->discount(), output);
  }

  // optional int32 numEpisodesBeforeTraining = 6;
  if (has_numepisodesbeforetraining()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->numepisodesbeforetraining(), output);
  }

  // optional int32 QTableOutputInterval = 7;
  if (has_qtableoutputinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->qtableoutputinterval(), output);
  }

  // optional int32 controlInterval = 8 [default = 1];
  if (has_controlinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->controlinterval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReinforcementLearning.QLearningSolverParameter)
}

::google::protobuf::uint8* QLearningSolverParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReinforcementLearning.QLearningSolverParameter)
  // optional int32 numTrainingEpisodes = 1;
  if (has_numtrainingepisodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numtrainingepisodes(), target);
  }

  // optional double learningRate = 2 [default = 0.1];
  if (has_learningrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->learningrate(), target);
  }

  // optional double epsilon = 3 [default = 0.95];
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->epsilon(), target);
  }

  // optional int32 EpisodeLength = 4;
  if (has_episodelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->episodelength(), target);
  }

  // optional double discount = 5 [default = 0.95];
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->discount(), target);
  }

  // optional int32 numEpisodesBeforeTraining = 6;
  if (has_numepisodesbeforetraining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->numepisodesbeforetraining(), target);
  }

  // optional int32 QTableOutputInterval = 7;
  if (has_qtableoutputinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->qtableoutputinterval(), target);
  }

  // optional int32 controlInterval = 8 [default = 1];
  if (has_controlinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->controlinterval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReinforcementLearning.QLearningSolverParameter)
  return target;
}

int QLearningSolverParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 numTrainingEpisodes = 1;
    if (has_numtrainingepisodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numtrainingepisodes());
    }

    // optional double learningRate = 2 [default = 0.1];
    if (has_learningrate()) {
      total_size += 1 + 8;
    }

    // optional double epsilon = 3 [default = 0.95];
    if (has_epsilon()) {
      total_size += 1 + 8;
    }

    // optional int32 EpisodeLength = 4;
    if (has_episodelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episodelength());
    }

    // optional double discount = 5 [default = 0.95];
    if (has_discount()) {
      total_size += 1 + 8;
    }

    // optional int32 numEpisodesBeforeTraining = 6;
    if (has_numepisodesbeforetraining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numepisodesbeforetraining());
    }

    // optional int32 QTableOutputInterval = 7;
    if (has_qtableoutputinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qtableoutputinterval());
    }

    // optional int32 controlInterval = 8 [default = 1];
    if (has_controlinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controlinterval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QLearningSolverParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QLearningSolverParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QLearningSolverParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QLearningSolverParameter::MergeFrom(const QLearningSolverParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numtrainingepisodes()) {
      set_numtrainingepisodes(from.numtrainingepisodes());
    }
    if (from.has_learningrate()) {
      set_learningrate(from.learningrate());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
    if (from.has_episodelength()) {
      set_episodelength(from.episodelength());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_numepisodesbeforetraining()) {
      set_numepisodesbeforetraining(from.numepisodesbeforetraining());
    }
    if (from.has_qtableoutputinterval()) {
      set_qtableoutputinterval(from.qtableoutputinterval());
    }
    if (from.has_controlinterval()) {
      set_controlinterval(from.controlinterval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QLearningSolverParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QLearningSolverParameter::CopyFrom(const QLearningSolverParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QLearningSolverParameter::IsInitialized() const {

  return true;
}

void QLearningSolverParameter::Swap(QLearningSolverParameter* other) {
  if (other != this) {
    std::swap(numtrainingepisodes_, other->numtrainingepisodes_);
    std::swap(learningrate_, other->learningrate_);
    std::swap(epsilon_, other->epsilon_);
    std::swap(episodelength_, other->episodelength_);
    std::swap(discount_, other->discount_);
    std::swap(numepisodesbeforetraining_, other->numepisodesbeforetraining_);
    std::swap(qtableoutputinterval_, other->qtableoutputinterval_);
    std::swap(controlinterval_, other->controlinterval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QLearningSolverParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QLearningSolverParameter_descriptor_;
  metadata.reflection = QLearningSolverParameter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ReinforcementLearning

// @@protoc_insertion_point(global_scope)
